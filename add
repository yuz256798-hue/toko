import React, { useState, useEffect } from "react";
import { Product, Category } from "@/entities/all";
import { UploadFile } from "@/integrations/Core";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { ArrowLeft, Upload, X, Plus, Save } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";

export default function AddProduct() {
  const navigate = useNavigate();
  const [categories, setCategories] = useState([]);
  const [product, setProduct] = useState({
    name: "",
    description: "",
    display_price: "",
    backend_price: "",
    category_id: "",
    featured: false,
    status: "active",
    images: []
  });
  const [uploading, setUploading] = useState(false);
  const [saving, setSaving] = useState(false);

  useEffect(() => {
    loadCategories();
  }, []);

  const loadCategories = async () => {
    const data = await Category.list("sort_order");
    setCategories(data);
  };

  const handleInputChange = (field, value) => {
    setProduct(prev => ({
      ...prev,
      [field]: value,
      // 自动设置分类名称
      ...(field === 'category_id' && {
        category_name: categories.find(c => c.id === value)?.name || ""
      })
    }));
  };

  const handleImageUpload = async (files) => {
    setUploading(true);
    try {
      const uploadPromises = Array.from(files).map(file => UploadFile({ file }));
      const results = await Promise.all(uploadPromises);
      const imageUrls = results.map(result => result.file_url);
      
      setProduct(prev => ({
        ...prev,
        images: [...prev.images, ...imageUrls]
      }));
    } catch (error) {
      console.error("图片上传失败:", error);
      alert("图片上传失败，请重试");
    } finally {
      setUploading(false);
    }
  };

  const removeImage = (index) => {
    setProduct(prev => ({
      ...prev,
      images: prev.images.filter((_, i) => i !== index)
    }));
  };

  const handleSave = async () => {
    if (!product.name || !product.display_price) {
      alert("请填写商品名称和价格");
      return;
    }

    setSaving(true);
    try {
      await Product.create({
        ...product,
        display_price: parseFloat(product.display_price),
        backend_price: product.backend_price ? parseFloat(product.backend_price) : null
      });
      
      navigate(createPageUrl("ManageProducts"));
    } catch (error) {
      console.error("保存失败:", error);
      alert("保存失败，请重试");
    } finally {
      setSaving(false);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* 顶部导航 */}
      <div className="bg-white sticky top-0 z-40 border-b border-gray-200">
        <div className="px-4 py-4 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <button
              onClick={() => navigate(-1)}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <ArrowLeft className="w-5 h-5" />
            </button>
            <h1 className="text-xl font-bold text-gray-900">添加商品</h1>
          </div>
          <Button 
            onClick={handleSave}
            disabled={saving || !product.name || !product.display_price}
            className="bg-orange-500 hover:bg-orange-600"
          >
            {saving ? (
              <>保存中...</>
            ) : (
              <>
                <Save className="w-4 h-4 mr-1" />
                保存
              </>
            )}
          </Button>
        </div>
      </div>

      <div className="p-4 space-y-6">
        {/* 商品图片 */}
        <div className="bg-white rounded-xl p-6 shadow-sm">
          <Label className="text-base font-semibold mb-4 block">商品图片</Label>
          
          {/* 图片上传区域 */}
          <div className="grid grid-cols-3 gap-4 mb-4">
            {product.images.map((image, index) => (
              <div key={index} className="relative aspect-square">
                <img
                  src={image}
                  alt={`商品图片 ${index + 1}`}
                  className="w-full h-full object-cover rounded-lg border border-gray-200"
                />
                <button
                  onClick={() => removeImage(index)}
                  className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 text-white rounded-full flex items-center justify-center hover:bg-red-600"
                >
                  <X className="w-4 h-4" />
                </button>
              </div>
            ))}
            
            {/* 上传按钮 */}
            <label className="aspect-square border-2 border-dashed border-gray-300 rounded-lg flex flex-col items-center justify-center cursor-pointer hover:border-orange-400 hover:bg-orange-50 transition-colors">
              <input
                type="file"
                multiple
                accept="image/*"
                className="hidden"
                onChange={(e) => handleImageUpload(e.target.files)}
                disabled={uploading}
              />
              {uploading ? (
                <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-orange-500"></div>
              ) : (
                <>
                  <Plus className="w-6 h-6 text-gray-400 mb-1" />
                  <span className="text-xs text-gray-500">添加图片</span>
                </>
              )}
            </label>
          </div>
        </div>

        {/* 基本信息 */}
        <div className="bg-white rounded-xl p-6 shadow-sm space-y-4">
          <h3 className="text-base font-semibold">基本信息</h3>
          
          <div>
            <Label htmlFor="name">商品名称 *</Label>
            <Input
              id="name"
              value={product.name}
              onChange={(e) => handleInputChange('name', e.target.value)}
              placeholder="请输入商品名称"
              className="mt-1"
            />
          </div>

          <div>
            <Label htmlFor="description">商品描述</Label>
            <Textarea
              id="description"
              value={product.description}
              onChange={(e) => handleInputChange('description', e.target.value)}
              placeholder="请输入商品描述"
              rows={4}
              className="mt-1"
            />
          </div>

          <div className="grid grid-cols-2 gap-4">
            <div>
              <Label htmlFor="display_price">显示价格 *</Label>
              <Input
                id="display_price"
                type="number"
                step="0.01"
                value={product.display_price}
                onChange={(e) => handleInputChange('display_price', e.target.value)}
                placeholder="0.00"
                className="mt-1"
              />
            </div>
            <div>
              <Label htmlFor="backend_price">后台价格</Label>
              <Input
                id="backend_price"
                type="number"
                step="0.01"
                value={product.backend_price}
                onChange={(e) => handleInputChange('backend_price', e.target.value)}
                placeholder="0.00"
                className="mt-1"
              />
            </div>
          </div>

          <div>
            <Label>商品分类</Label>
            <Select
              value={product.category_id}
              onValueChange={(value) => handleInputChange('category_id', value)}
            >
              <SelectTrigger className="mt-1">
                <SelectValue placeholder="选择分类" />
              </SelectTrigger>
              <SelectContent>
                {categories.map((category) => (
                  <SelectItem key={category.id} value={category.id}>
                    {category.name}
                  </SelectItem>
                ))}
              </SelectContent>
            </Select>
          </div>

          <div className="flex items-center gap-2">
            <input
              type="checkbox"
              id="featured"
              checked={product.featured}
              onChange={(e) => handleInputChange('featured', e.target.checked)}
              className="w-4 h-4 text-orange-600 bg-gray-100 border-gray-300 rounded focus:ring-orange-500"
            />
            <Label htmlFor="featured">设为推荐商品</Label>
          </div>
        </div>
      </div>
    </div>
  );
}
