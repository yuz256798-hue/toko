import React, { useState, useEffect } from "react";
import { Category, Product } from "@/entities/all";
import { ArrowLeft, Plus } from "lucide-react";
import { Button } from "@/components/ui/button";
import { useNavigate } from "react-router-dom";
import { createPageUrl } from "@/utils";

import CategoryCard from "../components/categories/CategoryCard";
import ProductGrid from "../components/home/ProductGrid";
import CategoryForm from "../components/categories/CategoryForm";

export default function Categories() {
  const navigate = useNavigate();
  const [categories, setCategories] = useState([]);
  const [products, setProducts] = useState([]);
  const [selectedCategory, setSelectedCategory] = useState(null);
  const [loading, setLoading] = useState(true);
  const [showAddForm, setShowAddForm] = useState(false);

  useEffect(() => {
    loadCategories();
  }, []);

  useEffect(() => {
    if (selectedCategory) {
      loadCategoryProducts(selectedCategory);
    } else {
      loadAllProducts();
    }
  }, [selectedCategory]);

  const loadCategories = async () => {
    const data = await Category.list("sort_order");
    setCategories(data);
    setLoading(false);
  };

  const loadAllProducts = async () => {
    const data = await Product.filter({ status: "active" }, "-created_date", 50);
    setProducts(data);
  };

  const loadCategoryProducts = async (category) => {
    const data = await Product.filter({ 
      status: "active", 
      category_id: category.id 
    }, "-created_date");
    setProducts(data);
  };

  const handleCategorySelect = (category) => {
    setSelectedCategory(selectedCategory?.id === category.id ? null : category);
  };

  const handleSaveCategory = async (categoryData) => {
    await Category.create(categoryData);
    setShowAddForm(false);
    loadCategories();
  };

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-orange-500"></div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* 顶部导航 */}
      <div className="bg-white sticky top-0 z-40 border-b border-gray-200">
        <div className="px-4 py-4 flex items-center justify-between">
          <div className="flex items-center gap-3">
            <button
              onClick={() => navigate(createPageUrl("Home"))}
              className="p-2 hover:bg-gray-100 rounded-full transition-colors"
            >
              <ArrowLeft className="w-5 h-5" />
            </button>
            <h1 className="text-xl font-bold text-gray-900">商品分类</h1>
          </div>
          <Button 
            onClick={() => setShowAddForm(true)}
            size="sm"
            className="bg-orange-500 hover:bg-orange-600"
          >
            <Plus className="w-4 h-4 mr-1" />
            添加分类
          </Button>
        </div>
      </div>

      <div className="p-4 space-y-6">
        {/* 分类列表 */}
        <section>
          <div className="flex items-center justify-between mb-4">
            <h2 className="text-lg font-semibold">选择分类</h2>
            {selectedCategory && (
              <Button
                variant="outline"
                size="sm"
                onClick={() => setSelectedCategory(null)}
              >
                显示全部
              </Button>
            )}
          </div>
          
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
            {categories.map((category) => (
              <CategoryCard
                key={category.id}
                category={category}
                isSelected={selectedCategory?.id === category.id}
                onSelect={() => handleCategorySelect(category)}
              />
            ))}
          </div>
        </section>

        {/* 商品列表 */}
        <section>
          <h2 className="text-lg font-semibold mb-4">
            {selectedCategory ? `${selectedCategory.name} (${products.length})` : `全部商品 (${products.length})`}
          </h2>
          
          {products.length > 0 ? (
            <ProductGrid products={products} />
          ) : (
            <div className="text-center py-12">
              <div className="w-20 h-20 mx-auto mb-4 bg-gray-100 rounded-full flex items-center justify-center">
                <div className="w-8 h-8 bg-gray-300 rounded"></div>
              </div>
              <p className="text-gray-500">
                {selectedCategory ? '该分类下暂无商品' : '暂无商品'}
              </p>
            </div>
          )}
        </section>
      </div>

      {/* 添加分类表单 */}
      {showAddForm && (
        <CategoryForm
          onSave={handleSaveCategory}
          onCancel={() => setShowAddForm(false)}
        />
      )}
    </div>
  );
}
